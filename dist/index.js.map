{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import process from 'node:process';\nimport chalk from 'chalk';\nimport cliCursor from 'cli-cursor';\nimport cliSpinners, { SpinnerName } from 'cli-spinners';\nimport logSymbols from 'log-symbols';\nimport stripAnsi from 'strip-ansi';\nimport wcwidth from 'wcwidth';\nimport isInteractive from 'is-interactive';\nimport isUnicodeSupported from 'is-unicode-supported';\nimport stdinDiscarder from 'stdin-discarder';\nimport { Options, PrefixTextGenerator, PromiseOptions, Spinner, SuffixTextGenerator } from './types';\n\nclass Ora {\n\t#linesToClear = 0;\n\t#isDiscardingStdin = false;\n\t#lineCount = 0;\n\t#frameIndex = 0;\n\t#options;\n\t#spinner: Spinner | SpinnerName | undefined;\n\t#stream;\n\t#id: any | undefined;\n\t#initialInterval;\n\t#isEnabled;\n\t#isSilent;\n\t#indent: number | undefined;\n\t#text: string | undefined;\n\t#prefixText: string | PrefixTextGenerator | undefined;\n\t#suffixText: string | SuffixTextGenerator | undefined;\n\n\tcolor;\n\n\t_stream: any;\n\t_isEnabled: any;\n\tlastIndent: any;\n\n\tconstructor(options: string | Options) {\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\ttext: options,\n\t\t\t};\n\t\t}\n\n\t\tthis.#options = {\n\t\t\tcolor: 'cyan',\n\t\t\tstream: process.stderr,\n\t\t\tdiscardStdin: true,\n\t\t\thideCursor: true,\n\t\t\t...options,\n\t\t};\n\n\t\t// Public\n\t\tthis.color = this.#options.color;\n\n\t\t// It's important that these use the public setters.\n\t\tthis.spinner = this.#options.spinner;\n\n\t\tthis.#initialInterval = this.#options.interval;\n\t\tthis.#stream = this.#options.stream;\n\t\tthis.#isEnabled = typeof this.#options.isEnabled === 'boolean' ? this.#options.isEnabled : isInteractive({stream: this.#stream});\n\t\tthis.#isSilent = typeof this.#options.isSilent === 'boolean' ? this.#options.isSilent : false;\n\n\t\t// Set *after* `this.#stream`.\n\t\t// It's important that these use the public setters.\n\t\tthis.text = this.#options.text;\n\t\tthis.prefixText = this.#options.prefixText;\n\t\tthis.suffixText = this.#options.suffixText;\n\t\tthis.indent = this.#options.indent;\n\n\t\tif (process.env.NODE_ENV === 'test') {\n\t\t\tthis._stream = this.#stream;\n\t\t\tthis._isEnabled = this.#isEnabled;\n\n\t\t\tObject.defineProperty(this, '_linesToClear', {\n\t\t\t\tget() {\n\t\t\t\t\treturn this.#linesToClear;\n\t\t\t\t},\n\t\t\t\tset(newValue) {\n\t\t\t\t\tthis.#linesToClear = newValue;\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tObject.defineProperty(this, '_frameIndex', {\n\t\t\t\tget() {\n\t\t\t\t\treturn this.#frameIndex;\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tObject.defineProperty(this, '_lineCount', {\n\t\t\t\tget() {\n\t\t\t\t\treturn this.#lineCount;\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\tget indent() {\n\t\treturn this.#indent;\n\t}\n\n\tset indent(indent) {\n\t\tif (!indent) {\n\t\t\tindent = 0;\n\t\t}\n\t\tif (!(indent >= 0 && Number.isInteger(indent))) {\n\t\t\tthrow new Error('The `indent` option must be an integer from 0 and up');\n\t\t}\n\n\t\tthis.#indent = indent;\n\t\tthis.#updateLineCount();\n\t}\n\n\tget interval() {\n\t\treturn this.#initialInterval ?? (this.#spinner as any).interval ?? 100;\n\t}\n\n\tget spinner() {\n\t\treturn this.#spinner;\n\t}\n\n\tset spinner(spinner) {\n\t\tthis.#frameIndex = 0;\n\t\tthis.#initialInterval = undefined;\n\n\t\tif (typeof spinner === 'object') {\n\t\t\tif (spinner.frames === undefined) {\n\t\t\t\tthrow new Error('The given spinner must have a `frames` property');\n\t\t\t}\n\n\t\t\tthis.#spinner = spinner;\n\t\t} else if (!isUnicodeSupported()) {\n\t\t\tthis.#spinner = cliSpinners.line;\n\t\t} else if (spinner === undefined) {\n\t\t\t// Set default spinner\n\t\t\tthis.#spinner = cliSpinners.dots;\n\t\t} else if ((spinner as any) !== 'default' && cliSpinners[spinner]) {\n\t\t\tthis.#spinner = cliSpinners[spinner];\n\t\t} else {\n\t\t\tthrow new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);\n\t\t}\n\t}\n\n\tget text() {\n\t\treturn this.#text;\n\t}\n\n\tset text(value) {\n\t\tif (!value) {\n\t\t\tvalue = '';\n\t\t}\n\t\tthis.#text = value;\n\t\tthis.#updateLineCount();\n\t}\n\n\tget prefixText() {\n\t\treturn this.#prefixText;\n\t}\n\n\tset prefixText(value) {\n\t\tif (!value) {\n\t\t\tvalue = '';\n\t\t}\n\t\tthis.#prefixText = value;\n\t\tthis.#updateLineCount();\n\t}\n\n\tget suffixText() {\n\t\treturn this.#suffixText;\n\t}\n\n\tset suffixText(value) {\n\t\tif (!value) {\n\t\t\tvalue = '';\n\t\t}\n\t\tthis.#suffixText = value;\n\t\tthis.#updateLineCount();\n\t}\n\n\tget isSpinning() {\n\t\treturn this.#id !== undefined;\n\t}\n\n\t#getFullPrefixText(prefixText = this.#prefixText, postfix = ' ') {\n\t\tif (typeof prefixText === 'string' && prefixText !== '') {\n\t\t\treturn prefixText + postfix;\n\t\t}\n\n\t\tif (typeof prefixText === 'function') {\n\t\t\treturn prefixText() + postfix;\n\t\t}\n\n\t\treturn '';\n\t}\n\n\t#getFullSuffixText(suffixText = this.#suffixText, prefix = ' ') {\n\t\tif (typeof suffixText === 'string' && suffixText !== '') {\n\t\t\treturn prefix + suffixText;\n\t\t}\n\n\t\tif (typeof suffixText === 'function') {\n\t\t\treturn prefix + suffixText();\n\t\t}\n\n\t\treturn '';\n\t}\n\n\t#updateLineCount() {\n\t\tconst columns = (this.#stream as any).columns ?? 80;\n\t\tconst fullPrefixText = this.#getFullPrefixText(this.#prefixText, '-');\n\t\tconst fullSuffixText = this.#getFullSuffixText(this.#suffixText, '-');\n\t\tconst fullText = ' '.repeat((this.#indent as any)) + fullPrefixText + '--' + this.#text + '--' + fullSuffixText;\n\n\t\tthis.#lineCount = 0;\n\t\tfor (const line of stripAnsi(fullText).split('\\n')) {\n\t\t\tthis.#lineCount += Math.max(1, Math.ceil(wcwidth(line) / columns));\n\t\t}\n\t}\n\n\tget isEnabled() {\n\t\treturn this.#isEnabled && !this.#isSilent;\n\t}\n\n\tset isEnabled(value) {\n\t\tif (typeof value !== 'boolean') {\n\t\t\tthrow new TypeError('The `isEnabled` option must be a boolean');\n\t\t}\n\n\t\tthis.#isEnabled = value;\n\t}\n\n\tget isSilent() {\n\t\treturn this.#isSilent;\n\t}\n\n\tset isSilent(value) {\n\t\tif (typeof value !== 'boolean') {\n\t\t\tthrow new TypeError('The `isSilent` option must be a boolean');\n\t\t}\n\n\t\tthis.#isSilent = value;\n\t}\n\n\tframe() {\n\t\tconst {frames} = (this.#spinner as any);\n\t\tlet frame = frames[this.#frameIndex];\n\n\t\tif (this.color) {\n\t\t\tframe = (chalk as any)[this.color](frame);\n\t\t}\n\n\t\tthis.#frameIndex = ++this.#frameIndex % frames.length;\n\t\tconst fullPrefixText = (typeof this.#prefixText === 'string' && this.#prefixText !== '') ? this.#prefixText + ' ' : '';\n\t\tconst fullText = typeof this.text === 'string' ? ' ' + this.text : '';\n\t\tconst fullSuffixText = (typeof this.#suffixText === 'string' && this.#suffixText !== '') ? ' ' + this.#suffixText : '';\n\n\t\treturn fullPrefixText + frame + fullText + fullSuffixText;\n\t}\n\n\tclear() {\n\t\tif (!this.#isEnabled || !(this.#stream as any).isTTY) {\n\t\t\treturn this;\n\t\t}\n\n\t\t(this.#stream as any).cursorTo(0);\n\n\t\tfor (let index = 0; index < this.#linesToClear; index++) {\n\t\t\tif (index > 0) {\n\t\t\t\t(this.#stream as any).moveCursor(0, -1);\n\t\t\t}\n\n\t\t\t(this.#stream as any).clearLine(1);\n\t\t}\n\n\t\tif (this.#indent || this.lastIndent !== this.#indent) {\n\t\t\t(this.#stream as any).cursorTo(this.#indent);\n\t\t}\n\n\t\tthis.lastIndent = this.#indent;\n\t\tthis.#linesToClear = 0;\n\n\t\treturn this;\n\t}\n\n\trender() {\n\t\tif (this.#isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.clear();\n\t\tthis.#stream.write(this.frame());\n\t\tthis.#linesToClear = this.#lineCount;\n\n\t\treturn this;\n\t}\n\n\tstart(text?: any) {\n\t\tif (text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\tif (this.#isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (!this.#isEnabled) {\n\t\t\tif (this.text) {\n\t\t\t\tthis.#stream.write(`- ${this.text}\\n`);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.isSpinning) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.#options.hideCursor) {\n\t\t\tcliCursor.hide(this.#stream);\n\t\t}\n\n\t\tif (this.#options.discardStdin && process.stdin.isTTY) {\n\t\t\tthis.#isDiscardingStdin = true;\n\t\t\tstdinDiscarder.start();\n\t\t}\n\n\t\tthis.render();\n\t\tthis.#id = setInterval(this.render.bind(this), this.interval);\n\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\tif (!this.#isEnabled) {\n\t\t\treturn this;\n\t\t}\n\n\t\tclearInterval(this.#id);\n\t\tthis.#id = undefined;\n\t\tthis.#frameIndex = 0;\n\t\tthis.clear();\n\t\tif (this.#options.hideCursor) {\n\t\t\tcliCursor.show(this.#stream);\n\t\t}\n\n\t\tif (this.#options.discardStdin && process.stdin.isTTY && this.#isDiscardingStdin) {\n\t\t\tstdinDiscarder.stop();\n\t\t\tthis.#isDiscardingStdin = false;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsucceed(text?: string) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.success, text});\n\t}\n\n\tfail(text?: string) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.error, text});\n\t}\n\n\twarn(text?: string) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.warning, text});\n\t}\n\n\tinfo(text?: string) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.info, text});\n\t}\n\n\tstopAndPersist(options: any = {}) {\n\t\tif (this.#isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst prefixText = options.prefixText ?? this.#prefixText;\n\t\tconst fullPrefixText = this.#getFullPrefixText(prefixText, ' ');\n\n\t\tconst symbolText = options.symbol ?? ' ';\n\n\t\tconst text = options.text ?? this.text;\n\t\tconst fullText = (typeof text === 'string') ? ' ' + text : '';\n\n\t\tconst suffixText = options.suffixText ?? this.#suffixText;\n\t\tconst fullSuffixText = this.#getFullSuffixText(suffixText, ' ');\n\n\t\tconst textToWrite = fullPrefixText + symbolText + fullText + fullSuffixText + '\\n';\n\n\t\tthis.stop();\n\t\tthis.#stream.write(textToWrite);\n\n\t\treturn this;\n\t}\n}\n\nexport default function ora(options: string | Options) {\n\treturn new Ora(options);\n}\n\nexport async function oraPromise<T>(action: PromiseLike<T> | ((spinner: Ora) => PromiseLike<T>), options: string | PromiseOptions<T>) {\n\tconst actionIsFunction = typeof action === 'function';\n\tconst actionIsPromise = typeof (action as any).then === 'function';\n\n\tif (!actionIsFunction && !actionIsPromise) {\n\t\tthrow new TypeError('Parameter `action` must be a Function or a Promise');\n\t}\n\n\tconst {successText, failText} = typeof options === 'object'\n\t\t? options\n\t\t: {successText: undefined, failText: undefined};\n\n\tconst spinner = ora(options).start();\n\n\ttry {\n\t\tconst promise = actionIsFunction ? action(spinner) : action;\n\t\tconst result = await promise;\n\n\t\tspinner.succeed(\n\t\t\tsuccessText === undefined\n\t\t\t\t? undefined\n\t\t\t\t: (typeof successText === 'string' ? successText : successText(result)),\n\t\t);\n\n\t\treturn result;\n\t} catch (error) {\n\t\tspinner.fail(\n\t\t\tfailText === undefined\n\t\t\t\t? undefined\n\t\t\t\t: (typeof failText === 'string' ? failText : failText(error as any)),\n\t\t);\n\n\t\tthrow error;\n\t}\n}\n\nexport {default as spinners} from 'cli-spinners';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoB;AACpB,mBAAkB;AAClB,wBAAsB;AACtB,0BAAyC;AACzC,yBAAuB;AACvB,wBAAsB;AACtB,qBAAoB;AACpB,4BAA0B;AAC1B,kCAA+B;AAC/B,6BAA2B;AAua3B,IAAAA,uBAAkC;AAhblC;AAYA,IAAM,MAAN,MAAU;AAAA,EAuBT,YAAY,SAA2B;AAkJvC;AAYA;AAYA;AAhMA,sCAAgB;AAChB,2CAAqB;AACrB,mCAAa;AACb,oCAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASC,QAAI,OAAO,YAAY,UAAU;AAChC,gBAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,IACD;AAEA,uBAAK,UAAW;AAAA,MACf,OAAO;AAAA,MACP,QAAQ,oBAAAC,QAAQ;AAAA,MAChB,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,GAAG;AAAA,IACJ;AAGA,SAAK,QAAQ,mBAAK,UAAS;AAG3B,SAAK,UAAU,mBAAK,UAAS;AAE7B,uBAAK,kBAAmB,mBAAK,UAAS;AACtC,uBAAK,SAAU,mBAAK,UAAS;AAC7B,uBAAK,YAAa,OAAO,mBAAK,UAAS,cAAc,YAAY,mBAAK,UAAS,gBAAY,sBAAAC,SAAc,EAAC,QAAQ,mBAAK,SAAO,CAAC;AAC/H,uBAAK,WAAY,OAAO,mBAAK,UAAS,aAAa,YAAY,mBAAK,UAAS,WAAW;AAIxF,SAAK,OAAO,mBAAK,UAAS;AAC1B,SAAK,aAAa,mBAAK,UAAS;AAChC,SAAK,aAAa,mBAAK,UAAS;AAChC,SAAK,SAAS,mBAAK,UAAS;AAE5B,QAAI,oBAAAD,QAAQ,IAAI,aAAa,QAAQ;AACpC,WAAK,UAAU,mBAAK;AACpB,WAAK,aAAa,mBAAK;AAEvB,aAAO,eAAe,MAAM,iBAAiB;AAAA,QAC5C,MAAM;AACL,iBAAO,mBAAK;AAAA,QACb;AAAA,QACA,IAAI,UAAU;AACb,6BAAK,eAAgB;AAAA,QACtB;AAAA,MACD,CAAC;AAED,aAAO,eAAe,MAAM,eAAe;AAAA,QAC1C,MAAM;AACL,iBAAO,mBAAK;AAAA,QACb;AAAA,MACD,CAAC;AAED,aAAO,eAAe,MAAM,cAAc;AAAA,QACzC,MAAM;AACL,iBAAO,mBAAK;AAAA,QACb;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,IAAI,SAAS;AACZ,WAAO,mBAAK;AAAA,EACb;AAAA,EAEA,IAAI,OAAO,QAAQ;AAClB,QAAI,CAAC,QAAQ;AACZ,eAAS;AAAA,IACV;AACA,QAAI,EAAE,UAAU,KAAK,OAAO,UAAU,MAAM,IAAI;AAC/C,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACvE;AAEA,uBAAK,SAAU;AACf,0BAAK,sCAAL;AAAA,EACD;AAAA,EAEA,IAAI,WAAW;AACd,WAAO,mBAAK,qBAAqB,mBAAK,UAAiB,YAAY;AAAA,EACpE;AAAA,EAEA,IAAI,UAAU;AACb,WAAO,mBAAK;AAAA,EACb;AAAA,EAEA,IAAI,QAAQ,SAAS;AACpB,uBAAK,aAAc;AACnB,uBAAK,kBAAmB;AAExB,QAAI,OAAO,YAAY,UAAU;AAChC,UAAI,QAAQ,WAAW,QAAW;AACjC,cAAM,IAAI,MAAM,iDAAiD;AAAA,MAClE;AAEA,yBAAK,UAAW;AAAA,IACjB,WAAW,KAAC,4BAAAE,SAAmB,GAAG;AACjC,yBAAK,UAAW,oBAAAC,QAAY;AAAA,IAC7B,WAAW,YAAY,QAAW;AAEjC,yBAAK,UAAW,oBAAAA,QAAY;AAAA,IAC7B,WAAY,YAAoB,aAAa,oBAAAA,QAAY,OAAO,GAAG;AAClE,yBAAK,UAAW,oBAAAA,QAAY,OAAO;AAAA,IACpC,OAAO;AACN,YAAM,IAAI,MAAM,uCAAuC,qGAAqG;AAAA,IAC7J;AAAA,EACD;AAAA,EAEA,IAAI,OAAO;AACV,WAAO,mBAAK;AAAA,EACb;AAAA,EAEA,IAAI,KAAK,OAAO;AACf,QAAI,CAAC,OAAO;AACX,cAAQ;AAAA,IACT;AACA,uBAAK,OAAQ;AACb,0BAAK,sCAAL;AAAA,EACD;AAAA,EAEA,IAAI,aAAa;AAChB,WAAO,mBAAK;AAAA,EACb;AAAA,EAEA,IAAI,WAAW,OAAO;AACrB,QAAI,CAAC,OAAO;AACX,cAAQ;AAAA,IACT;AACA,uBAAK,aAAc;AACnB,0BAAK,sCAAL;AAAA,EACD;AAAA,EAEA,IAAI,aAAa;AAChB,WAAO,mBAAK;AAAA,EACb;AAAA,EAEA,IAAI,WAAW,OAAO;AACrB,QAAI,CAAC,OAAO;AACX,cAAQ;AAAA,IACT;AACA,uBAAK,aAAc;AACnB,0BAAK,sCAAL;AAAA,EACD;AAAA,EAEA,IAAI,aAAa;AAChB,WAAO,mBAAK,SAAQ;AAAA,EACrB;AAAA,EAsCA,IAAI,YAAY;AACf,WAAO,mBAAK,eAAc,CAAC,mBAAK;AAAA,EACjC;AAAA,EAEA,IAAI,UAAU,OAAO;AACpB,QAAI,OAAO,UAAU,WAAW;AAC/B,YAAM,IAAI,UAAU,0CAA0C;AAAA,IAC/D;AAEA,uBAAK,YAAa;AAAA,EACnB;AAAA,EAEA,IAAI,WAAW;AACd,WAAO,mBAAK;AAAA,EACb;AAAA,EAEA,IAAI,SAAS,OAAO;AACnB,QAAI,OAAO,UAAU,WAAW;AAC/B,YAAM,IAAI,UAAU,yCAAyC;AAAA,IAC9D;AAEA,uBAAK,WAAY;AAAA,EAClB;AAAA,EAEA,QAAQ;AACP,UAAM,EAAC,OAAM,IAAK,mBAAK;AACvB,QAAI,QAAQ,OAAO,mBAAK,YAAW;AAEnC,QAAI,KAAK,OAAO;AACf,cAAS,aAAAC,QAAc,KAAK,KAAK,EAAE,KAAK;AAAA,IACzC;AAEA,uBAAK,aAAqB,EAAL,uBAAK,aAAL,IAAmB,OAAO;AAC/C,UAAM,iBAAkB,OAAO,mBAAK,iBAAgB,YAAY,mBAAK,iBAAgB,KAAM,mBAAK,eAAc,MAAM;AACpH,UAAM,WAAW,OAAO,KAAK,SAAS,WAAW,MAAM,KAAK,OAAO;AACnE,UAAM,iBAAkB,OAAO,mBAAK,iBAAgB,YAAY,mBAAK,iBAAgB,KAAM,MAAM,mBAAK,eAAc;AAEpH,WAAO,iBAAiB,QAAQ,WAAW;AAAA,EAC5C;AAAA,EAEA,QAAQ;AACP,QAAI,CAAC,mBAAK,eAAc,CAAE,mBAAK,SAAgB,OAAO;AACrD,aAAO;AAAA,IACR;AAEA,IAAC,mBAAK,SAAgB,SAAS,CAAC;AAEhC,aAAS,QAAQ,GAAG,QAAQ,mBAAK,gBAAe,SAAS;AACxD,UAAI,QAAQ,GAAG;AACd,QAAC,mBAAK,SAAgB,WAAW,GAAG,EAAE;AAAA,MACvC;AAEA,MAAC,mBAAK,SAAgB,UAAU,CAAC;AAAA,IAClC;AAEA,QAAI,mBAAK,YAAW,KAAK,eAAe,mBAAK,UAAS;AACrD,MAAC,mBAAK,SAAgB,SAAS,mBAAK,QAAO;AAAA,IAC5C;AAEA,SAAK,aAAa,mBAAK;AACvB,uBAAK,eAAgB;AAErB,WAAO;AAAA,EACR;AAAA,EAEA,SAAS;AACR,QAAI,mBAAK,YAAW;AACnB,aAAO;AAAA,IACR;AAEA,SAAK,MAAM;AACX,uBAAK,SAAQ,MAAM,KAAK,MAAM,CAAC;AAC/B,uBAAK,eAAgB,mBAAK;AAE1B,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,MAAY;AACjB,QAAI,MAAM;AACT,WAAK,OAAO;AAAA,IACb;AAEA,QAAI,mBAAK,YAAW;AACnB,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,mBAAK,aAAY;AACrB,UAAI,KAAK,MAAM;AACd,2BAAK,SAAQ,MAAM,KAAK,KAAK;AAAA,CAAQ;AAAA,MACtC;AAEA,aAAO;AAAA,IACR;AAEA,QAAI,KAAK,YAAY;AACpB,aAAO;AAAA,IACR;AAEA,QAAI,mBAAK,UAAS,YAAY;AAC7B,wBAAAC,QAAU,KAAK,mBAAK,QAAO;AAAA,IAC5B;AAEA,QAAI,mBAAK,UAAS,gBAAgB,oBAAAL,QAAQ,MAAM,OAAO;AACtD,yBAAK,oBAAqB;AAC1B,6BAAAM,QAAe,MAAM;AAAA,IACtB;AAEA,SAAK,OAAO;AACZ,uBAAK,KAAM,YAAY,KAAK,OAAO,KAAK,IAAI,GAAG,KAAK,QAAQ;AAE5D,WAAO;AAAA,EACR;AAAA,EAEA,OAAO;AACN,QAAI,CAAC,mBAAK,aAAY;AACrB,aAAO;AAAA,IACR;AAEA,kBAAc,mBAAK,IAAG;AACtB,uBAAK,KAAM;AACX,uBAAK,aAAc;AACnB,SAAK,MAAM;AACX,QAAI,mBAAK,UAAS,YAAY;AAC7B,wBAAAD,QAAU,KAAK,mBAAK,QAAO;AAAA,IAC5B;AAEA,QAAI,mBAAK,UAAS,gBAAgB,oBAAAL,QAAQ,MAAM,SAAS,mBAAK,qBAAoB;AACjF,6BAAAM,QAAe,KAAK;AACpB,yBAAK,oBAAqB;AAAA,IAC3B;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ,MAAe;AACtB,WAAO,KAAK,eAAe,EAAC,QAAQ,mBAAAC,QAAW,SAAS,KAAI,CAAC;AAAA,EAC9D;AAAA,EAEA,KAAK,MAAe;AACnB,WAAO,KAAK,eAAe,EAAC,QAAQ,mBAAAA,QAAW,OAAO,KAAI,CAAC;AAAA,EAC5D;AAAA,EAEA,KAAK,MAAe;AACnB,WAAO,KAAK,eAAe,EAAC,QAAQ,mBAAAA,QAAW,SAAS,KAAI,CAAC;AAAA,EAC9D;AAAA,EAEA,KAAK,MAAe;AACnB,WAAO,KAAK,eAAe,EAAC,QAAQ,mBAAAA,QAAW,MAAM,KAAI,CAAC;AAAA,EAC3D;AAAA,EAEA,eAAe,UAAe,CAAC,GAAG;AACjC,QAAI,mBAAK,YAAW;AACnB,aAAO;AAAA,IACR;AAEA,UAAM,aAAa,QAAQ,cAAc,mBAAK;AAC9C,UAAM,iBAAiB,sBAAK,0CAAL,WAAwB,YAAY;AAE3D,UAAM,aAAa,QAAQ,UAAU;AAErC,UAAM,OAAO,QAAQ,QAAQ,KAAK;AAClC,UAAM,WAAY,OAAO,SAAS,WAAY,MAAM,OAAO;AAE3D,UAAM,aAAa,QAAQ,cAAc,mBAAK;AAC9C,UAAM,iBAAiB,sBAAK,0CAAL,WAAwB,YAAY;AAE3D,UAAM,cAAc,iBAAiB,aAAa,WAAW,iBAAiB;AAE9E,SAAK,KAAK;AACV,uBAAK,SAAQ,MAAM,WAAW;AAE9B,WAAO;AAAA,EACR;AACD;AAzXC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0JA;AAAA,uBAAkB,SAAC,aAAa,mBAAK,cAAa,UAAU,KAAK;AAChE,MAAI,OAAO,eAAe,YAAY,eAAe,IAAI;AACxD,WAAO,aAAa;AAAA,EACrB;AAEA,MAAI,OAAO,eAAe,YAAY;AACrC,WAAO,WAAW,IAAI;AAAA,EACvB;AAEA,SAAO;AACR;AAEA;AAAA,uBAAkB,SAAC,aAAa,mBAAK,cAAa,SAAS,KAAK;AAC/D,MAAI,OAAO,eAAe,YAAY,eAAe,IAAI;AACxD,WAAO,SAAS;AAAA,EACjB;AAEA,MAAI,OAAO,eAAe,YAAY;AACrC,WAAO,SAAS,WAAW;AAAA,EAC5B;AAEA,SAAO;AACR;AAEA;AAAA,qBAAgB,WAAG;AAClB,QAAM,UAAW,mBAAK,SAAgB,WAAW;AACjD,QAAM,iBAAiB,sBAAK,0CAAL,WAAwB,mBAAK,cAAa;AACjE,QAAM,iBAAiB,sBAAK,0CAAL,WAAwB,mBAAK,cAAa;AACjE,QAAM,WAAW,IAAI,OAAQ,mBAAK,QAAe,IAAI,iBAAiB,OAAO,mBAAK,SAAQ,OAAO;AAEjG,qBAAK,YAAa;AAClB,aAAW,YAAQ,kBAAAC,SAAU,QAAQ,EAAE,MAAM,IAAI,GAAG;AACnD,uBAAK,YAAL,mBAAK,cAAc,KAAK,IAAI,GAAG,KAAK,SAAK,eAAAC,SAAQ,IAAI,IAAI,OAAO,CAAC;AAAA,EAClE;AACD;AAiLc,SAAR,IAAqB,SAA2B;AACtD,SAAO,IAAI,IAAI,OAAO;AACvB;AAEA,eAAsB,WAAc,QAA6D,SAAqC;AACrI,QAAM,mBAAmB,OAAO,WAAW;AAC3C,QAAM,kBAAkB,OAAQ,OAAe,SAAS;AAExD,MAAI,CAAC,oBAAoB,CAAC,iBAAiB;AAC1C,UAAM,IAAI,UAAU,oDAAoD;AAAA,EACzE;AAEA,QAAM,EAAC,aAAa,SAAQ,IAAI,OAAO,YAAY,WAChD,UACA,EAAC,aAAa,QAAW,UAAU,OAAS;AAE/C,QAAM,UAAU,IAAI,OAAO,EAAE,MAAM;AAEnC,MAAI;AACH,UAAM,UAAU,mBAAmB,OAAO,OAAO,IAAI;AACrD,UAAM,SAAS,MAAM;AAErB,YAAQ;AAAA,MACP,gBAAgB,SACb,SACC,OAAO,gBAAgB,WAAW,cAAc,YAAY,MAAM;AAAA,IACvE;AAEA,WAAO;AAAA,EACR,SAAS,OAAP;AACD,YAAQ;AAAA,MACP,aAAa,SACV,SACC,OAAO,aAAa,WAAW,WAAW,SAAS,KAAY;AAAA,IACpE;AAEA,UAAM;AAAA,EACP;AACD;","names":["import_cli_spinners","process","isInteractive","isUnicodeSupported","cliSpinners","chalk","cliCursor","stdinDiscarder","logSymbols","stripAnsi","wcwidth"]}